--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,18 @@
+Fri Jan 22 01:22:27 2010  NAKAMURA Usaku  <usa@ruby-lang.org>
+
+	* eval.c (thread_timer, rb_thread_stop_timer): check the timing of
+	  stopping timer.  patch from KOSAKI Motohiro <kosaki.motohiro _AT_
+	  jp.fujitsu.com>
+
+	* eval.c (rb_thread_start_timer): NetBSD5 seems to be hung when calling
+	  pthread_create() from pthread_atfork()'s parent handler.
+
+	* io.c (pipe_open): workaround for NetBSD5. stop timer thread before
+	  fork(), and start it if needed.
+
+	* process.c (rb_f_fork, rb_f_system): ditto.
+	  fixed [ruby-dev:40074]
+
 Sun Jan 10 19:00:31 2010  Nobuyoshi Nakada  <nobu@ruby-lang.org>
 
 	* lib/webrick/accesslog.rb : Escape needed.
diff --git a/eval.c b/eval.c
index 55dbb8c..4720c2a 100644
--- a/eval.c
+++ b/eval.c
@@ -12292,6 +12292,8 @@ static struct timer_thread {
     pthread_t thread;
 } time_thread = {PTHREAD_COND_INITIALIZER, PTHREAD_MUTEX_INITIALIZER};
 
+static int timer_stopping;
+
 #define safe_mutex_lock(lock) \
     pthread_mutex_lock(lock); \
     pthread_cleanup_push((void (*)_((void *)))pthread_mutex_unlock, lock)
@@ -12316,6 +12318,9 @@ thread_timer(dummy)
 #define WAIT_FOR_10MS() \
     pthread_cond_timedwait(&running->cond, &running->lock, get_ts(&to, PER_NANO/100))
     while ((err = WAIT_FOR_10MS()) == EINTR || err == ETIMEDOUT) {
+	if (timer_stopping)
+	    break;
+
 	if (!rb_thread_critical) {
 	    rb_thread_pending = 1;
 	    if (rb_trap_immediate) {
@@ -12343,7 +12348,9 @@ rb_thread_start_timer()
     safe_mutex_lock(&time_thread.lock);
     if (pthread_create(&time_thread.thread, 0, thread_timer, args) == 0) {
 	thread_init = 1;
+#ifndef __NetBSD__
 	pthread_atfork(0, 0, rb_thread_stop_timer);
+#endif
 	pthread_cond_wait(&start, &time_thread.lock);
     }
     pthread_cleanup_pop(1);
@@ -12354,10 +12361,12 @@ rb_thread_stop_timer()
 {
     if (!thread_init) return;
     safe_mutex_lock(&time_thread.lock);
+    timer_stopping = 1;
     pthread_cond_signal(&time_thread.cond);
     thread_init = 0;
     pthread_cleanup_pop(1);
     pthread_join(time_thread.thread, NULL);
+    timer_stopping = 0;
 }
 #elif defined(HAVE_SETITIMER)
 static void
diff --git a/io.c b/io.c
index c3fb3e4..a287d78 100644
--- a/io.c
+++ b/io.c
@@ -3245,6 +3245,9 @@ retry:
     }
 
   retry:
+#ifdef __NetBSD__
+    rb_thread_stop_timer();
+#endif
     switch ((pid = fork())) {
       case 0:			/* child */
 	if (modef & FMODE_READABLE) {
@@ -3272,11 +3275,17 @@ retry:
 		    ruby_sourcefile, ruby_sourceline, pname);
 	    _exit(127);
 	}
+#ifdef __NetBSD__
+	rb_thread_start_timer();
+#endif
 	rb_io_synchronized(RFILE(orig_stdout)->fptr);
 	rb_io_synchronized(RFILE(orig_stderr)->fptr);
 	return Qnil;
 
       case -1:			/* fork failed */
+#ifdef __NetBSD__
+	rb_thread_start_timer();
+#endif
 	if (errno == EAGAIN) {
 	    rb_thread_sleep(1);
 	    goto retry;
@@ -3297,6 +3306,9 @@ retry:
 	break;
 
       default:			/* parent */
+#ifdef __NetBSD__
+	rb_thread_start_timer();
+#endif
 	if (pid < 0) rb_sys_fail(pname);
 	else {
 	    VALUE port = io_alloc(rb_cIO);
diff --git a/process.c b/process.c
index 0d16bb6..22593c8 100644
--- a/process.c
+++ b/process.c
@@ -1330,7 +1330,14 @@ rb_f_fork(obj)
     fflush(stderr);
 #endif
 
+#ifdef __NetBSD__
+    before_exec();
+    pid = fork();
+    after_exec();
+    switch (pid) {
+#else
     switch (pid = fork()) {
+#endif
       case 0:
 #ifdef linux
 	after_exec();
@@ -1570,6 +1577,9 @@ rb_f_system(argc, argv)
 
     chfunc = signal(SIGCHLD, SIG_DFL);
   retry:
+#ifdef __NetBSD__
+    before_exec();
+#endif
     pid = fork();
     if (pid == 0) {
 	/* child process */
@@ -1577,6 +1587,9 @@ rb_f_system(argc, argv)
 	rb_protect(proc_exec_args, (VALUE)&earg, NULL);
 	_exit(127);
     }
+#ifdef __NetBSD__
+    after_exec();
+#endif
     if (pid < 0) {
 	if (errno == EAGAIN) {
 	    rb_thread_sleep(1);
-- 
1.7.0

